{"./":{"url":"./","title":"简介","keywords":"","body":"简介 本资源是PyTorch模型训练实用教程的第二版，将为广大朋友带来更丰富的PyTorch学习资源。看到PyTorch模型训练实用教程过了三年，仍旧在发光发热，依旧能帮助到初学者，这令我十分欣慰，但又非常愧疚。为什么？因为深感PyTorch模型训练实用教程的内容不够丰富，不能给初学朋友更多的帮助。为此，《PyTorch实用教程》将弥补第一版的空白，新增丰富的内容，想大家之所想，将提供在线阅读的电子书籍，以及入门友好的、可工业落地的配套代码。 本书整体分三部分，上篇：入门，中篇：应用，下篇：落地。 上篇 PyTorch基础。针对刚入门、非科班、本科生，提供PyTorch介绍，讲解开发环境的搭建，介绍PyTorch核心模块，详解核心功能函数，最后利用所讲解的PyTorch知识点构建一套自己的代码结构，为后续的应用打下基础。 中篇 产业应用。经过上篇，磨了一把好刀，接下来就用它在各领域上大显身手。计划讲解的领域包括，计算机视觉（Computer Vision）的图像分类、图像分割、目标检测、生成对抗网络等；自然语言处理（Natural Language Processing）的部分应用；语音识别；多模态等领域。（由于自己对CV比较熟悉，其他领域欢迎有志之士一同补充） 下篇 工业落地。有了工具，有了场景，接下来就要让它产生价值，变成可用的、好用的产品。本篇会涉及模型加速三板斧：模型量化、模型剪枝、模型蒸馏。此外，还会涉及主流的模型部署框架平台：TensorRT、Openvinno、ONNX等（同上，此处欢迎大家一同补充各平台的部署内容） 相信经过上、中、下篇的学习，可以帮助入门的同学少走很多弯路，快速掌握PyTorch，具备独当一面的能力，能依据实际场景选择算法模型，可以将模型部署应用，形成闭环，全流程打通。 如何使用本资源，请看前言 有任何想法和建议，欢迎与我联系：yts3221@126.com Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"preface.html":{"url":"preface.html","title":"前言","keywords":"","body":"前言 本书背后的故事 《PyTorch实用教程》（第二版），动笔时间为2021年12月16日，什么时候能完结，并不知道。为什么会不是写完再发布？因为担心再不迈出第一步，这本书就会难产。其实，想写这本书已经很久了，至少2年多了吧（见下图），总由于各种原因，迟迟没有开始动笔，索性，采用github在线更新的方式，和各位朋友提前见面吧，你们的反馈是我最大的动力。 为什么是书？ 书籍是人类智慧的结晶，不同于普通的博客、公众号甚至课件，书籍的内容会更加完整和充实，这是受到前些天看到的一个视频有感而发，视频说的是北大退休的韩茂莉教授将在B站上延续她的课堂生涯，将她毕生所学的历史地理知识传授给更多的朋友，在第一个视频里她提到：“但凡具有一种人类形成的，知识性的精华，其实都在书中 。” 看到这句话感触颇深，因为写书的事情一直在脑海中反复回荡，但一次次的被生活的琐碎给拍灭。除了韩老师触动之外，自己这几年的经历也十分契合书写一本书，同时也欢迎有志之士与我一同完善这本《PyTorch实用教程》（第二版）。 一小步 为了不让这本书难产，于是先走出这一小步，让自己踏上书写的征程，至于后面的东西交给时间吧。 为什么写这本书 ​ 这本书是对PyTorch模型训练实用教程的改进优化，是对第一版的内容进行丰富，会增加更多的PyTorch基础，增加丰富的应用案例，同时包含模型部署上线这一关键的知识点。萌生第二版的想法大约在2019年11月，当时距离第一版发布大约一年，期间又对PyTorch有了一个深入的学习了解过程，于是想把这本书继续优化下去，帮助更多的朋友快速掌握PyTorch。可奈于当时精力有限，就迟迟没有动笔，2020年与2021年是忙碌的两年，生活的琐碎以及工作占据了大多数时间，现在（2021年12月16日22:13:10）终于有合适的条件动笔了，一刻不敢拖延，害怕这刚刚燃起的火苗又被琐碎的生活浇灭。 ​ 除了是对第一版的改进，更大的原因是一种责任。由于这几年的经历，让我感到需要出一本高质量的PyTorch书，它一定是大家爱不释手的资料，可以为大家的深度学习道路提供一点便捷，能给大家带来些许改变，这就足够了。第一版发布过去已经三年有余，仍旧能看到她在发光发热，这令我十分欣慰，但又非常愧疚。 第一版仍旧在发光发热 ​ 因为第一版的内容略显简单，内容单薄，缺乏应用案例以及工业部署落地。那么第二版就是为了弥补上述缺点，把PyTorch基础内容完善，增加CV和NLP以及多模态的工业级应用案例，最后讲解模型部署，实现工业落地，这样的教程才是完整的，不是么。 ​ 通过本书，也希望给大家带来一个清晰的深度学习模型应用流程。 读者对象 首先，适合新手，本书上篇将介绍PyTorch最基础的概念，为新手构建知识框架，上篇所有知识点配备Notebook进行图、文、代码，三位一体的学习。 其次，适合初学者，本书中篇将采用PyTorch代码进行各领域应用案例讲解，暂定包括计算机视觉、自然语言处理、语音识别和多模态，同时提供完整的代码框架，开箱即用，无需额外编程，可涵盖大多数朋友的项目需求。 再者，适合中高级朋友，本书下篇将涉及模型加速与部署内容，是算法工程师进阶的必备之路，模型加速包括剪枝、量化、蒸馏，部署暂定包括TensorRT、OpenVINO和ONNX。 上中下篇分别对应不同阶段的学习，相信大多数朋友都能从本书中获益。 如何阅读这本书 本书采用电子书在线更新方式，详见PyTorch实用教程（第二版）-电子书 全书配套代码，详见PyTorch-Tutorial-2nd 由于自身水平、精力有限，书中不可避免的会出现错误，恳请大家指正。同时欢迎大家投稿，例如NLP方向，多模态方向，模型部署，模型加速方向均可。 欢迎联系：yts3221@126.com 致谢 首先感谢老婆的理解与支持（狗头）。 Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/":{"url":"chapter-1/","title":"第一章 PyTorch 简介与安装","keywords":"","body":"第一章 PyTorch 简介与安装 第一章 PyTorch 简介与安装 1.1 PyTorch 初认识 1.2 环境配置之Anaconda 1.3 环境配置之Pycharm 1.4 环境配置之CUDA&cuDNN 1.5 环境配置之PyTorch系列包 1.6 环境配置之Jupyter Notebook Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.1-PyTorch-Introduction.html":{"url":"chapter-1/1.1-PyTorch-Introduction.html","title":"1.1 PyTorch 初认识","keywords":"","body":"1.1 PyTorch 初认识 一句话认识PyTorch “An open source machine learning framework that accelerates the path from research prototyping to production deployment.” ——选自 https://pytorch.org/ PyTorch是一个帮助大家加速算法模型研究到产品部署的开源机器学习框架。 PyTorch历史 FAIR（ Facebook AI Research，Facebook人工智能研究院 ）于2017年初发布PyTorch，PyTorch的命名可以拆为Py（Python）与Torch。Py就是python语言，Torch是一款早期的深度学习框架，所以PyTorch是在Torch基础上用python语言重新打造的一款深度学习框架。 那么什么是Torch呢？Torch是纽约大学在2002年开发的深度学习框架。Torch虽然很好用，但是它采用了一门较为小众的语言——Lua语言作为接口。这明显地增高了Torch的使用门槛，想要使用Torch必须学习一门新的编程语言，这让大家都望而却步。 好在Torch的幕后团队也意识到这一点，于是团队采用python语言作为接口对Torch进行了重构，于是就有了PyTorch。 PyTorch代码最早公开可追溯到2016年8月24日的v0.1.1（https://github.com/pytorch/pytorch/tags?after=v0.1.4） 随后 •2017年1月正式发布PyTorch •2018年4月更新0.4.0版，支持Windows系统 •2018年11月更新1.0稳定版，已GitHub 增长第二快的开源项目 ...... 对PyTorch版本的更新感兴趣的朋友，可以关注 PyTorch-Tags，这里是最权威版本更新信息来源，要比官方文档还要快。 PyTorch必备网站 要熟悉PyTorch，不得不熟悉PyTorch的一些官方网站，以及这些网站的使用。下面列举几个实用的PyTorch网站。 官网 https://pytorch.org/ 官网包含权威的PyTorch介绍、PyTorch官方文档、生态资源等信息。例如Get Started中，可以获取权威的安装信息。例如，特定版本下，windows系统，所支持的CUDA版本是多少，这点非常关键，往往GPU用不起来，就是CUDA版本不匹配。 除了最新稳定版，还可以下载历史版本的whl文件，进行离线安装（网速不好的朋友，建议手动下载whl，然后进行安装）。历史版本whl的在哪那里下载呢？ 是需要挖掘的，网址在上图的windows系统、Pip安装、Python、CUDA条件下才会出现，它是：https://download.pytorch.org/whl，点击torch，就可以发现所有历史版本都在这里可以找到，并且命名都有良好的规范，这里不过多介绍，在安装部分再详细讲解。 除了Get Started栏目，其它栏目也是很好的学习资料。 Ecosystem：PyTorch生态系统资源库，里面收录生态系统内的资源，也欢迎大家加入并贡献资源，里边有CV数据增强开源库——albumentations、FB的目标检测和分割算法库——detectron2、优秀的部署平台——onnxruntime等等 Mobile：移动端PyTorch实现方案及资源。 Blog：PyTorch相关新闻。 Tutorials：案例教程，这里面都是个人提供的、针对某一个应用的demo级的教程。包含如下方向，对于新手来说，可以看一下，了解个大概，但里面的代码多是demo，无法开箱即用于项目应用，这也是本书第二部分将会弥补的地方，敬请期待。 Docs：PyTorch API官方文档, 这也是我一直首推的学习资料，PyTorch的文档非常友好，可以查阅不同版本，各个API都有详细介绍，大多都有代码案例，PyTorch的基础部分主要从这里开始进行讲解。Docs下还会分PyTorch、torchvision、torchaudio、torchtext等，大家需要针对性的检索。 Resource：这里包含各种资源，如社区、新闻报道、论坛、ModelHub资源等等。 PyTorch发展趋势 为什么要学PyTorch？ 因为PyTorch发展迅猛，已经在多方面荣登深度学习框架第一的宝座，学术界绝大多数论文都有PyTorch实现，想要紧跟技术，利用新模型进行科学研究，进行项目开发的，不得不跟随学术界的趋势，所以可以看到PyTorch席卷各界。 PyTorch称王，TensorFlow答应么？一起来看看几个数据。 图1： 各大顶会期刊中，使用PyTorch的论文数量占PyTorch+TensorFlow的百分比。其实就是 p / (p+t)，这里有一个分界点就是50%，当达到50%时，说明PyTorch与TensorFlow平分秋色，当大于50%时说明PyTorch已经超过TF，而当数据超过75%，表明PyTorch已经是TF的两倍。从这个趋势可以发现转折点在2018-2019年之间发生，现在已经2021年末了，哪个框架是学术界的带头大哥？ 图2：这幅图对比的是PyTorch与TF的决定数量，可以看到TF的份额被PyTorch一步步蚕食，实线代表的PyTorch持续上扬，TF的虚线不断下探。 图片出自：https://horace.io/pytorch-vs-tensorflow/ 通过学术界的论文情况就可以说明PyTorch是未来的大势所趋，虽然说早期PyTorch在工业部署上并不如TensorFlow，但是如今PyTorch推出了libtorch，TorchServe，以及各类优秀的，适配性良好的部署框架层出不穷，如TensorRT、OpenVINO、ONNX等，都可以帮助PyTorch进行快速部署 感觉PyTorch是得学术界得天下，先让科研工作者用爽了，新模型都是PyTorch实现的，工业界的朋友总不能不用最新的算法、模型吧，只能纷纷转向PyTorch了。因此，相信大家选择使用PyTorch进行深度学习、机器学习模型开发，一定能加速你的算法模型开发，也印证了PyTorch的主旨——“An open source machine learning framework that accelerates the path from research prototyping to production deployment.” Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.2-Anaconda.html":{"url":"chapter-1/1.2-Anaconda.html","title":"1.2 环境配置之Anaconda","keywords":"","body":"1.2 环境配置之Anaconda 工欲善其事必先利其器，想要使用PyTorch进行模型开发，必须要搭建好开发环境。听到环境安装，是否大家已经瑟瑟发抖？是否都被某些不知名的报错卡住好几天，百度各种搜不到答案，各种文章的方案都不适用？ 为了解决大家环境安装的苦恼，本章将从Python虚拟环境、Anaconda、Pycharm、CUDA、CuDNN的背景说起，给大家构建系统的认识，理清各软件之间的关系，为大家呈现一个清晰的、完整的开发环境配置。 1.1节中提到过，PyTorch是基于Python为接口提供给用户使用，因此Python语言是我们的核心，PyTorch对于python只是一个工具包（library），通过import torch的方式使用而已。因此想要搭建完整的PyTorch开发环境，其实是搭建完整的Python开发环境，同时安装上PyTorch这个工具库。 虚拟环境 为了使用PyTorch，先搞定Python环境安装。提到Python环境，就不得不讲python虚拟环境（virtual environment）的概念了。python虚拟环境是为了解决众多的工具包之间版本冲突而设计的一个纯净开发环境，简单地，可创建多个虚拟环境，不同的环境中使用不同的工具包，例如虚拟环境1中安装pytorch 1.6， 虚拟环境2中安装的是pytorch0.4，当需要用老版本pytorch时，切换到虚拟环境2，然后调用虚拟环境2中的解释器——python.exe 运行你的.py代码。当需要用pytorch1.6时，就切换到虚拟环境1，调用虚拟环境1中的python.exe运行代码。这样就很好的解决工具包版本冲突问题。 解释器 这里提到一个概念，解释器——python.exe。 解释器就是人类与CPU之间的桥梁，人写的高级语言，如print(\"Hello World\")，CPU是读不懂的，CPU只能读0/1形式的二进制文件，这时就需要一个翻译官——python.exe， python.exe读取.py文件，解释成二进制文件，让CPU读懂，并运行。这就是解释器的作用，更直观的例子，python3的解释器是无法翻译python2语法的语句print \"Hello World\"的，因此不同的python.exe其实就对应了不同的环境。 Anaconda Anaconda是为方便使用python而建立的一个软件包，其包含常用的250多个工具包，多版本python解释器和强大的虚拟环境管理工具，所以Anaconda得名python全家桶。Anaconda可以使安装、运行和升级环境变得更简单，因此使用它作为Python虚拟环境管理工具。 安装非常简单，首先进入 anaconda官网，点击“Get Started\", 点击”download anaconda installers“，看到如下图所示的信息，选择你对应的操作系统下载，安装即可。 安装完毕，可以尝试创建一个你的虚拟环境，这里需要注意创建环境的时候就要决定pyhon的版本，而pytorch的安装对python的版本有要求，所以大家先到pytorch官网看看要装的pytorch版本所支持的python版本，然后再回来创建虚拟环境。这里演示pytorch最新版本1.10的安装。由于1.10是支持python3.6/3.7/3.9的（通过 1.1介绍过的神奇网站找到信息），在这里用python3.6作为python版本进行创建虚拟环境。 >>> conda create -n pytorch-1.10-gpu python=3.6 这里的pytorch-1.10-gpu就是虚拟环境的名称，激活（activate）时的标识，同时也会在anaconda安装目录下创建pytorch-1.10-gpu的文件夹，在该文件夹存放本环境所有工具包、解释器，如下图所示： 虚拟环境创建好之后，可以看看这个文件夹里都有些什么，先来看解释器： D:\\Anaconda_data\\envs\\pytorch_1.10_gpu\\python.exe ，大家可以双击它，就可以看到解释器的相关信息，后续用到pytorch_1.10_gpu这个环境的时候，也是用这个.exe进行运行.py文件，后面用pycharm运行代码的时候会给大家callback。 到此，一个纯净的虚拟环境就创建好了，接下来需要激活（activate）这个环境，然后再里面进行各种工具包的安装。这里先暂停一下，先去看另外一个工具——Pycharm的安装及使用。 anaconda常用命令 创建环境：conda create -n your_env_name python=X.X （X.X为python版本） eg: conda create -n pytorch_tutorial python=3.7 激活环境：source activate your_env_name eg: source activate pytorch_tutorial 退出环境：source deactivate 删除环境：conda remove -n your_env_name –all eg: conda remove -n pytorch_tutorial --all 查看已有虚拟环境：conda env list / conda info -e （推荐大家自行了解更多anaconda命令） 有了anaconda帮助我们管理虚拟环境以及python工具包，接下来就可以安装IDE，用来管理项目了。请看Pycharm安装 Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.3-Pycharm.html":{"url":"chapter-1/1.3-Pycharm.html","title":"1.3 环境配置之Pycharm","keywords":"","body":"1.3 环境配置之Pycharm Pycharm——强大的python IDE Pycharm——强大的python IDE，拥有调试、语法高亮、Project管理、代码跳转、智能提示、版本控制等功能。有社区版和专业版区分，社区版为免费的，专业版需要付费，不过在校学生可通过edu邮箱进行注册，获取免费的专版使用。当然大家可以有其他方法完成购买。专业版相对于社区版功能更丰富一些，这里我采用的是pycharm.2019专业版，基础功能没有大的区别，用于演示还是OK的。 Pycharm的安装： 官网下载安装包 https://www.jetbrains.com/pycharm/ 运行pycharm-professional-2019.2.exe 选择路径，勾选Add launchers dir to the PATH，等待安装完成 激活部分：略。 这里主要讲如何创建项目，以及关联前面创建的虚拟环境pytorch_1.10_gpu。 打开pycharm，左上角的File可选择New，或者Open，如果已经有一个文件夹下有相关.py代码，那么就用Open对应的文件夹即可。这里假设已经存在pytorch-tutorial-2nd文件夹，找到它，Open即可。 我们找到pytorch-tutorial-2nd\\code\\chapter-1\\01-hello-pytorch.py，发现import torch下面有个红色波浪线，鼠标放上去会提示“No Module named torch\"，表明当前环境里并没有torch这个工具包。可好像我们并没有为当前.py文件设定好用哪个一解释器不是？所以我们先将当前项目pytorch-tutorial-2nd的虚拟环境设置为刚刚创建好的pytorch_1.10_gpu，然后再在pytorch_1.10_gpu里安装上pytorch即可。 左上角File--> Settings-->Project:pytorch-tutorial-2nd-->Project Interpreter， 然后如下图找到对应的python.exe，之后选中，点击OK,再次点击OK。就完成了虚拟环境与项目的关联，接着就可以安装pytorch了。 到这里，大家可以尝试运行 pytorch-tutorial-2nd\\code\\chapter-1\\01-hello-pytorch.py，会提示 D:\\Anaconda_data\\envs\\pytorch_1.10_gpu\\python.exe E:/pytorch-tutorial-2nd/code/chapter-1/01-hello-pytorch.py Traceback (most recent call last): File \"E:/pytorch-tutorial-2nd/code/chapter-1/01-hello-pytorch.py\", line 9, in import torch ModuleNotFoundError: No module named 'torch' Process finished with exit code 1 这里是完整的Pycharm控制台信息，我们可以看到第一行先是解释器（即对应了我们创建的虚拟环境），然后是执行的.py文件，接着是报错信息，提示没有torch这个module，下一小节我们来就来安装这个module。 pycharm拓展 pycharm是很好用的IDE，这里面提供很多快捷键，希望大家可以熟悉使用这些快捷键，例如常用的 批量注释：Ctrl + / 快速查看文档：Ctrl + q 搜索：Ctrl+f 运行：Shift + F10 Tab / Shift + Tab 缩进、不缩进当前行 Ctrl + D 复制选定的区域或行 Ctrl + Y 删除选定的行 更多功能推荐大家自行了解一下pycharm的基础使用，相信它一定是你的高效生产力。pycharm也有一些出名的教程，例如《pycharm 中文指南》pycharm中文指南。 Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.4-CUDA&cuDNN.html":{"url":"chapter-1/1.4-CUDA&cuDNN.html","title":"1.4 环境配置之CUDA&cuDNN","keywords":"","body":"1.4 环境配置之CUDA&cuDNN 有了python环境，有了开发环境，下面马上到主角登场。PyTorch登场前，针对GPU版，还需要额外安装一些东西。 从1.1我们知道PyTorch的安装可根据设备类型分为GPU版或CPU版。 CPU 对于CPU版本直接通过pip或者anaconda命令安装即可，如： >>> pip3 install torch torchvision torchaudio 具体的命令可查阅：https://pytorch.org/get-started/locally/ 官网上给出的命令其实安装了3个包，分别是torch, torchvision,torchaudio，这命令会根据当前系统自动选择对应python版本的whl进行安装，不需要用户操心。但，如果网速不好，或者需要离线安装，这时可以考虑下载whl包然后自行安装，下载whl的链接：https://download.pytorch.org/whl/torch/ pytorch与torchvision版本匹配 若是手动下载的whl，需要注意pytorch与torchvision之间版本对应关系，这个可以到torchvision Github查看，这点非常重要，CV中一些报错就是因为torchvision与pytorch版本不匹配导致的。这里就copy过来，大家参考好了。 torch torchvision python main / nightly main / nightly >=3.6, 1.10.0 0.11.1 >=3.6, 1.9.1 0.10.1 >=3.6, 1.9.0 0.10.0 >=3.6, 1.8.2 0.9.2 >=3.6, 1.8.1 0.9.1 >=3.6, 1.8.0 0.9.0 >=3.6, 1.7.1 0.8.2 >=3.6, 1.7.0 0.8.1 >=3.6, 1.7.0 0.8.0 >=3.6, 1.6.0 0.7.0 >=3.6, 1.5.1 0.6.1 >=3.5, 1.5.0 0.6.0 >=3.5, 1.4.0 0.5.0 ==2.7, >=3.5, 1.3.1 0.4.2 ==2.7, >=3.5, 1.3.0 0.4.1 ==2.7, >=3.5, 1.2.0 0.4.0 ==2.7, >=3.5, 1.1.0 0.3.0 ==2.7, >=3.5, 0.2.2 ==2.7, >=3.5, 举一反三，torchaudio、torchtext同理。 GPU版本 深度学习能火，正式因为有了强大的GPU支撑，自然地，绝大多数情况下我们会安装GPU版本的pytorch。目前PyTorch不仅支持NVIDIA的GPU，还支持AMD的ROMc的GPU。不过我们还是以N卡为例，毕竟N卡还是主流，A卡仍需努力。 对于N卡，什么型号是pytorch支持的呢？首先，需要计算能力（compute capability）≥3.0的GPU。很多地方都会看到计算能力≥3.0，理论出自哪呢？ 我在官方文档里找到了出处文档 It has a CUDA counterpart, that enables you to run your tensor computations on an NVIDIA GPU with compute capability >= 3.0 那么问题来了，怎么知道自己的GPU的copute capability呢？请看NVIDA文档,选择你对应的系列，找到对应型号。 举几个例子： GPU 计算能力 GeForce RTX 2080 7.5 GeForce RTX 2070 7.5 GeForce RTX 2060 7.5 GeForce GTX 1080 6.1 GeForce GTX 1070 6.1 GeForce GTX 1060 6.1 其实，只要是近几年购买的N卡都是没有问题的。确定了显卡是支持的，接下来就要决定一个非常重要事情，就是选中对应的CUDA版本进行安装。 CUDA ​ CUDA(ComputeUnified Device Architecture)，是NVIDIA推出的运算平台。 CUDA是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。 与之配套的是cuDNN, NVIDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。NVIDIA cuDNN可以集成到更高级别的机器学习框架中。 细心的朋友在PyTorch官网就能发现， Compute Platform中并不给出显卡型号，而是给出CUDA版本，这就要求我们安装特定版本的CUDA，才能使用特定版本的PyTorch。例如PyTorch 1.10 只支持CUDA 10.2, CUDA 11.3，以及CUDA 11.1。为什么这里用了以及呢？ 因为在官网上并没有显示CUDA 11.1，但是在https://download.pytorch.org/whl/torch，搜索，可以看到11.1的whl。 在这里选择的是10.2版本进行安装，CUDA下载通过官网，官网通常只显示最新版本cuda，这里需要大家进入具体的版本下载界面，拖到底部，找到： Archive of Previous CUDA Releases 接着可以找到对应的CUDA版本，进入下载即可，这Installer Type 有 exe (network) 和 exe (local)两种选择，我们选local的方式，下载2.6G的cuda_10.2.89_441.22_win10.exe即可。 安装方式十分简单，一直下一步即可，只需要记住安装到了哪里，这里默认路径为 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2 下面来测试一下CUDA安装是否成功，可以打开命令窗，进入C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\bin，然后输入 nvcc -V cuDNN 有了CUDA平台，还需要安装cuDNN，cuDNN全称为NVIDIA CUDA Deep Neural Network (cuDNN) 。它是一个深度神经网络的加速库，里边实现了神经网络常用的操作，并且是高度优化的，可以极大地榨干NVIDA显卡的性能，因此用N卡都会用cuDNN库。 cuDNN库的安装非常简单，与其说是安装，不如说是下载库文件，放到CUDA所在的目录下。具体步骤如下： 打开网址：https://developer.nvidia.com/cudnn，点击右上角，需要注册，再登录。 登录后，点击Download cuDNN，跳转到下载页面，选择好cudnn版本，操作系统版本，即可开始下载 将下载好的压缩包cudnn-10.2-windows10-x64-v8.2.4.15.zip 解压 分别将bin、include、lib\\x64下的文件分别对应拷贝到C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2文件夹下的bin、include、lib\\x64下 打开命令窗口，在C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\extras\\demo_suite文件夹中分别执行bandwidthTest.exe和deviceQuery.exe。观察到Result=PASS即可 Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.5-PyTorch-install.html":{"url":"chapter-1/1.5-PyTorch-install.html","title":"1.5 环境配置之PyTorch系列包","keywords":"","body":"1.5 环境配置之PyTorch系列包 虚拟环境，Pycharm，CUDA，cuDNN均已准备好，现在终于可以安装PyTorch了，加油，就快成功啦。 现在，通过命令窗口，进入（激活）虚拟环境 E:\\pytorch-tutorial-2nd>conda activate pytorch_1.10_gpu (pytorch_1.10_gpu) E:\\pytorch-tutorial-2nd> 可通过以下命令安装 pip3 install torch==1.10.1+cu102 torchvision==0.11.2+cu102 torchaudio===0.10.1+cu102 -f https://download.pytorch.org/whl/cu102/torch_stable.html 可以看到通过pip安装，也是下载我们提到的神奇网站里的whl文件，这时大家可以根据自己的网速决定是采用pip还是自行下载的方法。 如果网速不好的话，推荐通过神奇的网站——https://download.pytorch.org/whl/torch 搜索对应的whl进行下载。然后pip install *.whl就行。 对于pip，建议大家添加镜像源。例如，清华镜像源或者中科大镜像源，这样安装python工具包的下载速度会快很多，请自行百度如何添加清华镜像源。 安装完毕，再回到pycharm，运行 pytorch-tutorial-2nd\\code\\chapter-1\\01-hello-pytorch.py，可以看到 D:\\Anaconda_data\\envs\\pytorch_1.10_gpu\\python.exe E:/pytorch-tutorial-2nd/code/chapter-1/01-hello-pytorch.py Hello World, Hello PyTorch 1.10.1+cu102 CUDA is available:True, version is 10.2 device_name: NVIDIA GeForce GTX 1660 Ti with Max-Q Design Process finished with exit code 0 表示pytorch环境安装完毕，此时我们也可以再次打开pycharm的解释器配置，可以看到当前的解释器（虚拟环境）下，拥有的相关工具包，这个界面也是后续大家检查当前环境工具包版本常用的工具，请收藏。 Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "},"chapter-1/1.6-JupyterNotebook-install.html":{"url":"chapter-1/1.6-JupyterNotebook-install.html","title":"1.6 环境配置之Jupyter Notebook","keywords":"","body":"1.6 环境配置之Jupyter Notebook 什么是 jupyter notebook 经过前几个小节，大家已经具备了PyTorch开发环境，但本教程需要照顾初学者使用代码，让刚入门的同学有更好的代码学习体验。因此，在上篇，主要采用Jupyter Notebook进行代码演示。 注意：\"Notebook只建议用于学习目的，不建议用于项目开发\" * 3， 重要事说三遍！ 为什么？这是由于notebook自身定位决定的，先来看看jupyter notebook 的定义“The Jupyter Notebook is a web application for creating and sharing documents that contain code, visualizations, and text. It can be used for data science, statistical modeling, machine learning, and much more.”——官网 Jupyter notebook 是一个网页应用，在这个网页上可以编写代码、做可视化、写文本，这就是非常好的教学展示平台。可以在上面进行概念描述、配上代码、运行结果，并且可以按小段进行代码运行，给用户更多的交互体验，便于用户理解代码细节。 基于此，上篇主要采用notebook进行代码讲解，到了中篇，基于完整的项目代码框架进行应用开发。 关于jupyter与jupyter notebook的关系，请大家查看官网（以下开始，notebook 指代 jupyter notebook） notebook 运行逻辑 notebook不是一个简单的web应用程序，它还需要关联指定的kernel，用于执行我们的代码。相信刚接触notebook的朋友大多都被notebook, kernel的概念搞的一头雾水。如果上述概念理不清楚，就更不清楚如何配置kernel，选择指定的虚拟环境了。 下面，我们先来看看notebook的结构 图片来自官网 图中左边是用户写的代码，传输到中间的Jupyter server, server本身不能执行代码（python.exe干的活，server是不会的），server把代码传给Kernel，Kernel才是真正干活，执行代码的地方。Kernel执行完代码，把结果返回给server，再返回到用户的网页。 从图中可以看出Kernel不仅可以是python.exe，也可以是其他语言的解释器，如Julia, R等，更多kernel可以看支持的kernel列表. 通过上述示意图我们就知道了，在pytorch开发中，kernel其实就是某一个python解释器——python.exe，我们需要让当前的notebook启用对应的kernel，来进入相应的虚拟环境，这样才能运行代码。 notebook 安装 理清概念，下面进行notebook安装，我们续期是正确调用pytorch_1.10_gpu这个虚拟环境来执行notebook上的代码。 安装过程分3步： 进入虚拟环境：conda activate pytorch_1.10_gpu 安装ipykernel工具包（安装jupyter）: pip install jupyter 添加kernel到notebook： python -m ipykernel install --user --name pytorch_1.10_gpu (意思是，将python这个kernel添加到jupyter的kernel中，由于当前已经在虚拟环境中，所以第一个python表示的含义是：D:\\Anaconda_data\\envs\\pytorch_1.10_gpu\\python.exe；而pytorch_1.10_gpu是kernel的别名，用于区分不同的kernel，这里建议与虚拟环境名称保持一致就好) 启动 在命令窗中执行jupyter notebook就可以打开web应用了，网址为:http://localhost:8888; 这里默认端口为8888，如果你再次启动一个jupyter notebook，可以看到端口号变为了8889，即它是另外一个web服务。 进入之后，我们可以看到有一个/目录，我们需要找到我们的notebook文件进行打开，这里有一个小技巧，就是进入到指定文件夹后，再运行notebook，这样notebook的路径就进入了想要的文件夹。 配置kernel 我们进入 chapter-1/02-notebook-demo.ipynb，点击run，可发现如下报错 --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) in 7 \"\"\" 8 ----> 9 import torch 10 11 print(\"Hello World, Hello PyTorch {}\".format(torch.__version__)) ModuleNotFoundError: No module named 'torch' 告诉我们找不到torch这个包，这很明显，使用的kernel不是我们的D:\\Anaconda_data\\envs\\pytorch_1.10_gpu\\python.exe。 下面我们来设置一下，方法很简单： 再次运行，可看到以下信息，表明notebook的环境就配置好了。 Hello World, Hello PyTorch 1.10.1+cu102 CUDA is available:True, version is 10.2 device_name: NVIDIA GeForce GTX 1660 Ti with Max-Q Design 实用插件——jupyter_contrib_nbextensions 原生的notebook还是缺点意思，这里推荐大家安装jupyter_contrib_nbextensions插件，jupyter_contrib_nbextensions提供了非常丰富的功能，例如代码折叠、分段折叠、代码自动补全、字体大小、行号显示、目录索引等等，详见下图 插件安装十分简单，打开命令窗，进入虚拟环境，分别依次执行 : pip install jupyter_contrib_nbextensions jupyter contrib nbextension install --user 然后重启notebook，就可以看到导航栏里有Nbextensions，大家可以根据自己的喜好进行调整，更多内容请查看Github Notebook 快速上手 notebook所使用的文件格式为.ipynb，jupyter会将.ipynb转为json进行保存，这样便于版本记录以及分享。 例如下图是用sublime打开的 02-notebook-demo.ipynb 下面，我们来研究notebook界面和常用的操作。 界面中需要认识的几个模块分别是：菜单栏、工具栏、单元格（cell） 菜单栏：用得最多的是Kernel，用于中断程序、重启解释器环境、切换解释器等；其它按键顾名思义。 工具栏：一些功能的按钮，高手都是用快捷键的。 单元格：这就是承载信息的地方，cell可分为code cells, markdown cells, raw cells。用得最多的是code cells和markdown cells。 右上角有一个小圆圈，用于观察当前kernel运行状态，如果是实心的，表明kernel正在运行某个cell，被运行的cell以及等待运行的cell的左边会有一个* notebook 的两种模式 Notebook中的单元，有两种模式：命令模式(Command Mode)与编辑模式(Edit Mode)，在不同模式下我们可以进行不同的操作。 命令模式：cell的边框为蓝色，此时可对cell进行操作。在编辑模式下，按esc键进入命令模式。 编辑模式：cell的边框为绿色，此时可在单元格内编辑代码或文档。在命令模式下，按enter或return键进入编辑模式。 常用快捷键 在命令模式下，按下“h”键，就会弹出快捷键的介绍，但是太多了，不方便初学者使用，这里总结一些常用的，实用的快捷键供大家参考。 命令模式： 插入单元格： A 键上方插入，B 键在下方插入 合并单元格：选中多个单元格，Shift + M 显示行号：L 删除单元格：连续按两次D 剪切单元格：X。 通常我用X代替删除，毕竟只用按一个键，哈哈。 复制粘贴单元格： C/V 撤销删除的单元格：要撤消已删除的单元格，请按 Z 键 编辑模式： 运行单元格：Ctrl + Enter 运行并创建新单元格：Alt + Enter 分割单元格：光标放到想要分割的地方，Ctrl + Shift + - 函数详情：Shift+Tab （注意，要把模块导入才会提示函数详情！） 请大家将以上快捷键都试用一遍，这些是高频快捷键，下面给大家列举所有快捷键，请收藏。 下面再介绍两个神奇操作，分别是在单元格中执行shell命令以及magic操作。 请自行尝试!+shell命令进行体会。 magic commands Magic关键字是 IPython 的高级用法，如%matplotlib将matplolib设置为交互式 %和%%分别代表 行Magic命令 和 单元格Magic命令 演示一个魔法命令 %%timeit %%timeit a = [] for i in range(10): a.append(i) 858 ns ± 50.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each) 表示将代码段运行了100万次，并统计运行时间。 更多更全的magic commands请看这里Jupyter 魔术命令（magic commands） 更多奇淫技巧推荐大家看看Jupyter Notebook 有哪些奇技淫巧？ 更多官方信息请查看Jupyter Notebook docs Copyright © TingsongYu 2021 all right reserved，powered by Gitbook文件修订时间： 2021年12月19日11:48:10 "}}